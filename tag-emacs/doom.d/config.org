#+title: Doom Emacs Configuration
#+author: rharink
#+startup: fold
#+property: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle no :results silent
#+html_head: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>

* Basic configuration
** Personal information
It's useful to have some basic personal information
#+begin_src emacs-lisp
(setq user-full-name "Robert den Harink"
      user-mail-address "robert@robhar.com")
#+end_src
This is also used by ~GPG~
** GPG
Speaking of ~GPG~, I want to use =~/.authsource.gpg= instead of the default in
=~/.emacs.d=. Why? Because my home directory is already cluttered, so this won't
make a difference, and I don't want to accidentaly purge this file (I have done
~rm -rf~/.emac.d~ before). I also want to cache as much as possible, as my home
machine is pretty safe, and my laptop is shutdown a lot.
#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil) ; default is 7200 (2h)
#+end_src

I use yubikeys for ssh so let's change the ssh auth sock variable
#+begin_src emacs-lisp
(setenv "SSH_AUTH_SOCK" "/Users/robert/.gnupg/S.gpg-agent.ssh")
#+end_src
** Defaults
*** Simple settings
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "â€¦")               ; Unicode ellispis are nicer than "...", and also save /precious/ space

(display-time-mode 1)                             ; Enable time in the mode-line
(global-subword-mode 1)                           ; Iterate through CamelCase words
#+end_src

*** Auto-customisation
By default changes made via a customisation interface are added to =init.el=.
I prefer the idea of using a separate file for this. We just need to change a
setting, and load it if it exists.
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
** Doom
*** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
Doom has this lovely /modular configuration base/ that takes a lot of work out of
configuring Emacs. Each module (when enabled) can provide a list of packages to
install (on ~doom sync~) and configuration to be applied. The modules can also
have flags applied to tweak their behaviour.

#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments none
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe) ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy
        +fuzzy
        +prescient
        +icons)               ; a search engine for love and life

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       ;;doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
                                        ;minimap           ; show a map of the code on the side
       (modeline) ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim

       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       ;;vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       spell             ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       (magit +forge)             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ledger            ; an accounting system in Emacs
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       (php +lsp)               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

*** Visual Settings
**** Font Face
#+begin_src emacs-lisp
(setq inhibit-compacting-font-caches t)
(setq doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-big-font (font-spec :family "JetBrains Mono" :size 18)
      doom-variable-pitch-font (font-spec :family "IBM Plex Sans" :height 20)
      doom-serif-font (font-spec :family "IBM Plex Sans" :weight 'light))

(after! org (set-popup-rule! "^\\*lsp-help" :side 'bottom :size .30 :select t)
  (set-popup-rule! "*helm*" :side 'right :size .30 :select t)
  (set-popup-rule! "*Org QL View:*" :side 'right :size .25 :select t)
  (set-popup-rule! "*Capture*" :side 'left :size .30 :select t)
  (set-popup-rule! "*eww*" :side 'right :size .30 :select t)
  (set-popup-rule! "*CAPTURE-*" :side 'left :size .30 :select t))

(after! org
  (custom-set-faces!
    '(org-level-1 :height 1.15 :inherit outline-1)
    '(org-level-2 :height 1.13 :inherit outline-2)
    '(org-level-3 :height 1.11 :inherit outline-3)
    '(org-level-4 :height 1.09 :inherit outline-4)
    '(org-level-5 :height 1.07 :inherit outline-5)
    '(org-level-6 :height 1.05 :inherit outline-6)
    '(org-level-7 :height 1.03 :inherit outline-7)
    '(org-level-8 :height 1.01 :inherit outline-8)))

(after! org
  (custom-set-faces!
    '(org-document-title :height 1.15)))

(after! org
  (custom-set-faces!
    '(org-meta-line :family "IBM Plex Mono")
    '(org-document-info-keyword :family "IBM Plex Mono")
    '(org-document-info :family "IBM Plex Mono")))
#+end_src

I like a little more line-spacing
#+begin_src emacs-lisp
(setq-default line-spacing 0.19)
#+end_src

Make the mode-line smaller
#+begin_src emacs-lisp
(setq doom-modeline-height 25)
(set-face-attribute 'mode-line nil :height 120)
#+end_src
**** Theme and modeline
~doom-one~ is nice and all, but I find the ~vibrant~ variant nicer. Oh, and with the
nice selection doom provides there's no reason for me to want the defaults.
#+begin_src emacs-lisp
(setq doom-theme 'doom-vibrant)
(delq! t custom-theme-load-path)
#+end_src
However, by default ~red~ text is used in the ~modeline~, so let's make that orange
so I don't feel like something's gone /wrong/ when editing files.
#+begin_src emacs-lisp
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src
While we're modifying the modeline, =LF UTF-8= is the default file encoding, and
thus not worth noting in the modeline. So, let's conditionally hide it.
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src
**** Miscellaneous
Relative line numbers are fantastic for knowing how far away line numbers are,
then =ESC 12 <UP>= gets you exactly where you think.
#+begin_src emacs-lisp
;;(setq display-line-numbers-type 'relative)
#+end_src
I'd like some slightly nicer default buffer names
#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "â–º Doom"
      +doom-dashboard-name "â–º Doom")
#+end_src
There's a bug with the modeline in insert mode for org documents ([[https://github.com/seagle0128/doom-modeline/issues/300][issue]]), so
#+begin_src emacs-lisp
(custom-set-faces! '(doom-modeline-evil-insert-state :weight bold :foreground "#339CDB"))
#+end_src
* Package loading
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments no
:END:
This file shouldn't be byte compiled.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src
** Loading instructions
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
This is where you install packages, by declaring them with the ~package!~
macro, then running ~doom refresh~ on the command line. You'll need to
restart Emacs for your changes to take effect! Or at least, run =M-x doom/reload=.

WARNING: Don't disable core packages listed in ~~/.emacs.d/core/packages.el~.
Doom requires these, and disabling them may have terrible side effects.

*** Packages in MELPA/ELPA/emacsmirror
To install ~some-package~ from MELPA, ELPA or emacsmirror:
#+begin_src emacs-lisp
(package! some-package)
#+end_src

*** Packages from git repositories
To install a package directly from a particular repo, you'll need to specify
a ~:recipe~. You'll find documentation on what ~:recipe~ accepts [[https://github.com/raxod502/straight.el#the-recipe-format][here]]:
#+begin_src emacs-lisp
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a ~PACKAGENAME.el~
file, or is located in a subdirectory of the repo, you'll need to specify
~:files~ in the ~:recipe~:
#+begin_src emacs-lisp
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

*** Disabling built-in packages
If you'd like to disable a package included with Doom, for whatever reason,
you can do so here with the ~:disable~ property:
#+begin_src emacs-lisp
(package! builtin-package :disable t)
#+end_src
You can override the recipe of a built in package without having to specify
all the properties for ~:recipe~. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:
#+begin_src emacs-lisp
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a ~:branch~ to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't 'master' (which
our package manager can't deal with; see [[https://github.com/raxod502/straight.el/issues/279][raxod502/straight.el#279]])
#+begin_src emacs-lisp
(package! builtin-package :recipe (:branch "develop"))
#+end_src
** General packages
*** Window management
#+begin_src emacs-lisp
(package! rotate)
#+end_src
*** Fun
Sometimes one just wants a little fun.
XKCD comics are fun.
#+begin_src emacs-lisp
(package! xkcd)
#+end_src

With all our fancy Emacs themes, my terminal is missing out!
#+begin_src emacs-lisp
(package! theme-magic)
#+end_src
*** Improving features
**** ESS
View data frames better with
#+begin_src emacs-lisp
(package! ess-view)
#+end_src
**** Info colours
This makes manual pages nicer to look at :)
Variable pitch fontification + colouring

#+begin_src emacs-lisp
(package! info-colors)
#+end_src
**** Mixed pitch
#+begin_src emacs-lisp
(package! mixed-pitch)
#+end_src
*** SVG-Tags
#+begin_src emacs-lisp
(package! svg-tag-mode)
#+end_src
*** Org-clock-csv
#+begin_src emacs-lisp
(package! org-clock-csv)
#+end_src
*** Org reveal js
#+begin_src emacs-lisp
(package! ox-reveal)
#+end_src
*** Tree sitter
#+begin_src emacs-lisp
(package! tree-sitter)
(package! tree-sitter-langs)
#+end_src
** Language packages
*** Org Mode
**** Improve agenda/capture
The agenda is nice, but a souped up version is nicer.
#+begin_src emacs-lisp
(package! org-super-agenda)
#+end_src

Similarly ~doct~ (Declarative Org Capture Templates) seems to be a nicer way to
set up org-capture.
#+begin_src emacs-lisp
(package! doct)
#+end_src

Pull in Google calendar
#+begin_src emacs-lisp
(package! org-gcal)
#+end_src

*** Systemd
For editing systemd unit files
#+begin_src emacs-lisp
(package! systemd)
#+end_src
*** Graphviz
Graphviz is a nice method of visualising simple graphs, based on plaintext
=.dot= / =.gv= files.
#+begin_src emacs-lisp
(package! graphviz-dot-mode)
#+end_src
*** PHP
XDebug
#+begin_src emacs-lisp
(package! geben)
#+end_src
*** Nginx
#+begin_src emacs-lisp
(package! nginx-mode)
#+end_src
* Package configuration
** Company
    It's nice to have completions almost all the time, in my opinion. Key strokes
    are just waiting to be saved!
    #+begin_src emacs-lisp
    (after! company
      (setq company-idle-delay 0.3
            company-minimum-prefix-length 2)
      (setq company-show-numbers t))
    #+end_src
    Now, the improvements from ~precedent~ are mostly from remembering history, so
    let's improve that memory.
    #+begin_src emacs-lisp
    (setq-default history-length 1000)
    (setq-default prescient-history-length 1000)
    #+end_src

*** Plain Text
    ~Ispell~ is nice, let's have it in ~text~, ~markdown~, and ~GFM~.
    #+begin_src emacs-lisp
    (set-company-backend!
      '(text-mode
        markdown-mode
        gfm-mode)
      '(:seperate
        company-ispell
        company-files
        company-yasnippet))
    #+end_src
    We then configure the dictionary we're using in [[*Ispell][Ispell]].
    *** ESS
    ~company-dabbrev-code~ is nice. Let's have it.
    #+begin_src emacs-lisp
    (set-company-backend! 'ess-r-mode '(company-R-args company-R-objects company-dabbrev-code :separate))
    #+end_src
** Deft
#+begin_src emacs-lisp
(use-package! deft
  :after org
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/notes"))
#+end_src
** Evil
 I donâ€™t use ~evil-escape-mode~, so I may as well turn it off, Iâ€™ve heard it
 contributes a typing delay. Iâ€™m not sure itâ€™s much, but it is an extra
 pre-command-hook that I donâ€™t benefit from, soâ€¦
#+begin_src emacs-lisp
(after! evil-escape (evil-escape-mode -1))
#+end_src

When I want to make a substitution, I want it to be global more often than not â€”
so letâ€™s make that the default. 
#+begin_src emacs-lisp
(after! evil (setq evil-ex-substitute-global t))
#+end_src
** ISpell
*** Downloading dictionaries
Let's get a nice big dictionary from [[http://app.aspell.net/create][SCOWL Custom List/Dictionary Creator]] with
the following configuration
- size :: 80 (huge)
- spellings :: British(-ise) and Australian
- spelling variants level :: 0
- diacritics :: keep
- extra lists :: hacker, roman numerals
  *** Hunspell
#+begin_src shell :tangle (if (file-exists-p "/usr/local/share/myspell/en-custom.dic") "no" "setup.sh")
cd /tmp
curl -o "hunspell-en-custom.zip" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=US&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=hunspell'
unzip "hunspell-en-custom.zip"

mv en-custom.{aff,dic} /usr/local/share/myspell/
#+end_src
**** Aspell
#+begin_src shell :tangle (if (file-expand-wildcards "/usr/lib64/aspell*/en-custom.multi") "no" "setup.sh")
cd /tmp
curl -o "aspell6-en-custom.tar.bz2" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=aspell'
tar -xjf "aspell6-en-custom.tar.bz2"

cd aspell6-en-custom
./configure && make && make install
#+end_src
*** Configuration
#+begin_src emacs-lisp
(setq ispell-dictionary "en-custom")
#+end_src
Oh, and by the way, if ~company-ispell-dictionary~ is ~nil~, then
~ispell-complete-word-dict~ is used instead, which once again when ~nil~ is
~ispell-alternate-dictionary~, which at the moment maps to a plaintext version of
the above.

It seems reasonable to want to keep an eye on my personal dict, let's have it
nearby (also means that if I change the 'main' dictionary I keep my addition).
#+begin_src emacs-lisp
(setq ispell-personal-dictionary (expand-file-name ".ispell_personal" doom-private-dir))
#+end_src
** Ivy
While in an ivy mini-buffer =C-o= shows a list of all possible actions one may take.
By default this is ~#'ivy-read-action-by-key~ however a better interface to this
is using Hydra.
#+begin_src emacs-lisp
(setq ivy-read-action-function #'ivy-hydra-read-action)
#+end_src

I currently have ~40k functions. This seems like sufficient motivation to
increase the maximum number of items ivy will sort to 40k + a bit, this way
=SPC h f= et al. will continue to function as expected.
#+begin_src emacs-lisp
(setq ivy-sort-max-size 50000)
#+end_src
** SVG-Tags
#+begin_src emacs-lisp
(use-package! svg-tag-mode)
#+end_src
** Tree Sitter
#+begin_src emacs-lisp
(use-package! tree-sitter)
(use-package! tree-sitter-langs)
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src
** Org reveal
#+begin_src emacs-lisp
(use-package! ox-reveal)
#+end_src
* Language configuration
** General
*** File Templates
    For some file types, we overwrite defaults in the [[file:./snippets][snippets]] directory, others
    need to have a template assigned.
    #+begin_src emacs-lisp
    (set-file-template! "\\.tex$" :trigger "__" :mode 'latex-mode)
    (set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)
    (set-file-template! "/LICEN[CS]E$" :trigger '+file-templates/insert-license)
    #+end_src

** PHP Mode
    PHP Mode configuration
    #+BEGIN_SRC emacs-lisp
    (use-package php-mode
    ;;
    :init
    (setq phpactor-executable "/usr/local/bin/phpactor")
    :hook ((php-mode . (lambda () (set (make-local-variable 'company-backends)
                                        '(;; list of backends
                                        company-phpactor
                                        company-files
                                        ))))))
    #+END_SRC
** Nginx
#+begin_src emacs-lisp
(use-package nginx-mode)
#+end_src
** Rust
    #+BEGIN_SRC emacs-lisp
    (use-package lsp-rust
        :after lsp-mode
        :init
        (setq rustic-lsp-server 'rust-analyzer)
        (setq lsp-rust-server 'rust-analyzer))

    (after! rustic-mode (setq rustic-lsp-server 'rust-analyzer))
    #+END_SRC
** Typescript
    #+BEGIN_SRC emacs-lisp
    (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (setq company-tooltip-align-annotations t)
    (setq tide-completion-detailed nil)
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; enable eslint
    (setq flycheck-checker 'javascript-eslint)
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    ;; enable typescript-tslint checker
    ;;(flycheck-add-mode 'typescript-tslint 'web-mode)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

    ;; aligns annotation to the right hand side
    (use-package tide
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
            (typescript-mode . tide-hl-identifier-mode)))

    (add-hook 'typescript-mode-hook #'setup-tide-mode)

    (require 'web-mode)
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-hook 'web-mode-hook
            (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
    #+END_SRC
** Org mode
*** Defaults
#+begin_src emacs-lisp
(use-package! org
  :config
  (setq org-directory "~/org"               ; let's put files here
        +org-capture-todo-file "~/org/gtd/todo.org"
        org-agenda-files (quote ("~/org/gtd/todo.org"))
        org-hide-emphasis-markers t                 ; show actually italicized text instead of /italicized text/
        org-use-property-inheritance t              ; it's convenient to have properties inherited
        org-list-allow-alphabetical t               ; have a. A. a) A) list bullets
        org-export-in-background t                  ; run export processes in external emacs process
        org-catch-invisible-edits 'smart            ; try not to accidently do weird stuff in invisible regions
        org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "WAITING(w)" "MAYBE(m)" "|" "DONE(x)" "CANCELLED(c)"))
        org-todo-keyword-faces '(("TODO" . (:foreground "#0afc6f" :weight bold))
                                 ("NEXT" . (:foreground "#ff7070" :weight bold))
                                 ("STARTED" . (:foreground "#fcc900" :weight bold))
                                 ("WAITING" . (:foreground "#bfbfbf" :weight bold))
                                 ("MAYBE" . (:foreground "#828282" :weight bold))
                                 ("DONE" . (:foreground "#fab3fc" :weight bold))
                                 ("CANCELLED" . (:foreground "#fab3fc" :italic t)))
        org-tag-alist '(
                        ;; Depth
                        ("@deep" . ?i) ;; "Deep"
                        ("@shallow" . ?p) ;; "Shallow"
                        ;; Context
                        ("@work" . ?w)
                        ("@home" . ?h)
                        ("@errand" . ?e)
                        ;; Energy
                        ("Challenge" . ?1)
                        ("Average" . ?2)
                        ("Easy" . ?3)
                        ;; Billing
                        ("Billable" . ?+)
                        ("NonBillable" . ?-)
                        ("Billed" . ?$)
                        ;; Categories
                        ("Biz" . ?b) ; admin, sales, marketing, investment, supplier management, managing user feedback, metrics and analytics
                        ("Dev" . ?d) ; coding, prototyping, wire framing, operations, bug investigation and bug fixing
                        ("Hiring" . ?h) ; reading CVs, interviews, contracts, meet-ups, dealing with recruiters
                        ("Inbox" . ?i) ; keeping up with email and notifications
                        ("Manage" . ?m) ; personal planning, sprint planning, training devs, 1:1s, equipment, code review, retrospectives
                        ("Meeting" . ?c) ; scheduled meetings and calls
                        ("QA" . ?q) ; manual testing
                        )
        ;; Refiling
        org-refile-targets '((("~/org/gtd/todo.org") :maxlevel . 3))
        org-refile-use-outline-path t

        ;; Clocking
        org-clock-idle-time nil
        org-clock-continuously nil
        org-clock-persist-query-resume nil
        org-clock-auto-clock-resolution (quote when-no-clock-is-running)
        org-clock-out-remove-zero-time-clocks t
        org-clock-persist t
        org-clock-in-switch-to-state "STARTED"
        org-clock-in-resume nil
        org-clock-report-include-clocking-task t
        org-clock-out-remove-zero-time-clocks t
        org-clock-history-length 23
        org-archive-subtree-add-inherited-tags t
        org-log-into-drawer t
        org-clock-into-drawer t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-agenda-clock-consistency-checks (quote (:max-duration "4:00"
                                                    :min-duration 0
                                                    :max-gap 0
                                                    :gap-ok-around ("4:00")))
        ))
#+end_src

Show effort in agenda items
#+begin_src emacs-lisp
(setq org-agenda-prefix-format '((agenda . " %i %-12t %-6e % s")
                                 (todo . " %i %-12:c %-12e")
                                 (tags . " %i %-12:c")
                                 (search . " %i %-12:c")))
#+end_src

Use mixed pitch in orgmode
#+begin_src emacs-lisp
(use-package! mixed-pitch
  :hook (org-mode . mixed-pitch-mode))
#+end_src
*** Export CSV
#+begin_src emacs-lisp
(use-package! org-clock-csv)
#+end_src
*** Super agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))
(after! org-agenda
  (org-super-agenda-mode))

;; header key map breaks evil navigation
(setq org-super-agenda-header-map (make-sparse-keymap))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-include-diary t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t
      org-agenda-start-on-weekday nil)

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :habit t
                          :order 1)
                         (:discard (:anything))))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Overdue"
                           :deadline past
                           :order 1)
                          (:name "Important"
                           :priority "A"
                           :order 10)
                          (:name "Due Today"
                           :deadline today
                           :order 11)
                          (:name "Started"
                           :todo "STARTED"
                           :order 12)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:name "Datazilla"
                           :tag "Datazilla"
                           :order 60)
                          (:name "Flux Platform"
                           :tag "Flux"
                           :order 65)
                          (:name "Syntec"
                           :tag "Syntec"
                           :order 70)
                          ))))))))
#+end_src
*** Capture
#+begin_src emacs-lisp
(use-package! doct
  :commands (doct))

(setq org-capture-templates
      (doct `(("Tasks" :keys "t"
               :icon ("inbox" :set "octicon" :color "yellow")
               :file +org-capture-todo-file
               :prepend t
               :headline "Inbox"
               :type entry
               :template ("* TODO %? %^G"
                          "%a"))
              ("Issue" :keys "i"
               :icon ("bug" :set "faicon" :color "red")
               :type entry
               :headline "Inbox"
               :file +org-capture-todo-file
               :template ("* TODO %^{Ticket} %? %^G"
                          "%a"))
              ("Project" :keys "p"
               :icon ("book" :set "faicon" :color "forest-green")
               :type entry
               :headline "Projects"
               :file +org-capture-todo-file
               :template-file "~/org/templates/newproject.org"
               )
              ("Phone Call" :keys "c"
               :icon ("phone" :set "faicon" :color "forest-green")
               :type entry
               :headline "Inbox"
               :file +org-capture-todo-file
               :template ("* TODO %? :Meeting:")
               :clock-in t
               :clock-resume t
               )
              ("Journal" :keys "j"
               :icon ("book" :set "faicon" :color "green")
               :file "~/org/journal.org.gpg"
               :datetree t
               :template ("* %T"
                          "%?"))
              ("Review: Daily" :keys "d"
               :icon ("search" :set "faicon" :color "purple")
               :file "~/org/gtd/log.org"
               :prepend t
               :headline "Daily Reviews"
               :type entry
               :datetree t
               :template-file "~/org/templates/dailyreview.org"
               )
              ("Review: Monthly" :keys "m"
               :icon ("search" :set "faicon" :color "purple")
               :file "~/org/gtd/log.org"
               :prepend t
               :headline "Monthly Reviews"
               :type entry
               :datetree t
               :template-file "~/org/templates/monthlyreview.org"
               )
              ("Review: Administration" :keys "a"
               :icon ("money" :set "faicon" :color "purple")
               :file "~/org/gtd/log.org"
               :prepend t
               :headline "Administration"
               :type entry
               :datetree t
               :template-file "~/org/templates/admin.org"
               )
              )))
#+end_src
*** Agenda
Open agenda on today
#+begin_src emacs-lisp
(map!
 :leader
 (:prefix "o"
  ("z" #'org-agenda-on-today)))

(defun org-agenda-on-today (&optional arg org-keys restriction)
  (interactive "P")
  (org-agenda arg org-keys restriction)
  (when (org-agenda-check-type nil 'agenda)
    (org-agenda-goto-today)))
#+end_src
*** Crypt
Encrypt parts of a org file with GPG key
#+begin_src emacs-lisp
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))
(setq org-crypt-key "robert@robhar.com")
(setq auto-save-default nil)
#+end_src
