
[core]
    excludesFile = ~/.config/git/gitignore
    editor = vim
    autocrlf = input
    safecrlf = warn
    #pager = less -Mi -+F
    pager = delta
    attributesfile = ~/.gitattributes

[user]
    name = Robert den Harink
    email = robert@robhar.com
    signingkey = robert@robhar.com

[include]
    path = ~/.gitconfig.local

[github]
    user = rharink

[pull]
    rebase = true

[commit]
    template = ~/.config/git/gitmessage
    #gpgSign = true

[delta]
    plus-color = "#012800"
    minus-color = "#340001"
    syntax-theme = Monokai Extended
    features = decorations
    whitespace-error-style = 22 reverse

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none

[interactive]
    diffFilter = delta --color-only

[apply]
    whitespace = fix

[help]
    autocorrect = 1

[push]
    default = simple

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[transfer]
    fsckObjects = false

[diff]
    tool = vimdiff

[grep]
    extendedRegexp = true

[merge]
    tool = vimdiff
    # Make 'git fetch; git merge' behave like 'git pull' on the
    # current branch.
    defaultToUpstream = true

[color]
    ui = auto

[log]
    # Show times in my time zone.
    date = relative

[alias]
    # commit count
    count = !git shortlog -sn

    # force-with-lease option is far more polite.
    # it checks that your local copy of the ref that you’re overwriting is
    # up-to-date before overwriting it. This indicates that you’ve at least
    # fetched the changes you’re about to stomp.
    please = push --force-with-lease

    # Ever commit and then immediately realize you’d forgotten to stage a file?
    # git commend quietly tacks any staged files onto the last commit you
    # created, re-using your existing commit message. So as long as you haven’t
    # pushed yet, no-one will be the wiser.
    commend = commit --amend --no-edit

    # The first commit of a repository can not be rebased like regular commits,
    # so it’s good practice to create an empty commit as your repository root.
    # git it both initializes your repository and creates an empty root commit
    # in one quick step.
    it = !git init && git commit -m “root” --allow-empty

    # git stsh    -> stash only unstaged changes to tracked files
    # git stash   -> stash any changes to tracked files
    # git staash  -> stash untracked and tracked files
    # git staaash -> stash ignored, untracked, and tracked files
    stsh = stash --keep-index
    staash = stash --include-untracked
    staaash = stash --all

    # git merc uses the --no-ff strategy, to always create a merge commit.
    merc = merge --no-ff

    # push including tags that are connected to the current branch.
    pushtags = push --follow-tags

    # prune local tags that do not exist on remote
    prunetags = !git tag -l | xargs git tag -d && git fetch -t

