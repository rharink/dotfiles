[user]
    name = "Robert den Harink"
    email = {{ .email | quote }}
    signingkey = {{ .signingkey | quote }}

[core]
    editor = nvim
    autocrlf = input
    safecrlf = warn
    pager = delta
    attributesfile = ~/config/git/.gitattributes
    excludesFile = ~/.config/git/gitignore

[index]
    skipHash = false

[init]
    defaultBranch = main

[pull]
    rebase = true
    ff = only

[commit]
    gpgsign = true

[gpg]
    program = /usr/local/MacGPG2/bin/gpg

[checkout]
  defaultRemote = origin

[interactive]
    diffFilter = delta --color-only

[apply]
    whitespace = fix

[help]
    autocorrect = 1

[push]
    default = simple
    
    # if set to "true" assume --set-upstream on default push when no upstream
    # tracking exists for the current branch; this option takes effect with
    # push.default options simple, upstream, and current. It is useful if by
    # default you want new branches to be pushed to the default remote (like
    # the behavior of push.default=current) and you also want the upstream
    # tracking to be set. Workflows most likely to benefit from this option are
    # simple central workflows where all branches are expected to have the same
    # name on the remote.
    autoSetupRemote = true

[fetch]
    prune = true

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[transfer]
    fsckObjects = false

[diff]
    tool = vimdiff

[grep]
  lineNumber = true
  extendedRegexp = true

[mergetool "nvim"]
  cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"

[merge]
    ff = false
    tool = nvim
    # Make 'git fetch; git merge' behave like 'git pull' on the
    # current branch.
    defaultToUpstream = true

[color]
    ui = auto

[log]
    # Show times in my time zone.
    date = relative

[alias]
    # commit count
    count = !git shortlog -sn

    # force-with-lease option is far more polite.
    # it checks that your local copy of the ref that you’re overwriting is
    # up-to-date before overwriting it. This indicates that you’ve at least
    # fetched the changes you’re about to stomp.
    please = push --force-with-lease

    # Ever commit and then immediately realize you’d forgotten to stage a file?
    # git commend quietly tacks any staged files onto the last commit you
    # created, re-using your existing commit message. So as long as you haven’t
    # pushed yet, no-one will be the wiser.
    commend = commit --amend --no-edit

    # The first commit of a repository can not be rebased like regular commits,
    # so it’s good practice to create an empty commit as your repository root.
    # git it both initializes your repository and creates an empty root commit
    # in one quick step.
    it = !git init && git commit -m “root” --allow-empty

    # git stsh    -> stash only unstaged changes to tracked files
    # git stash   -> stash any changes to tracked files
    # git staash  -> stash untracked and tracked files
    # git staaash -> stash ignored, untracked, and tracked files
    stsh = stash --keep-index
    staash = stash --include-untracked
    staaash = stash --all

    # git merc uses the --no-ff strategy, to always create a merge commit.
    merc = merge --no-ff

    # push including tags that are connected to the current branch.
    pushtags = push --follow-tags

    # prune local tags that do not exist on remote
    prunetags = !git tag -l | xargs git tag -d && git fetch -t

    # Displays your branches and when you last changed them. It’s really useful
    # for remembering which one you were just working on, and which branches
    # probably should be deleted.
    wip = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads

[feature]
    manyFiles = true

[github]
    user = "rharink"
